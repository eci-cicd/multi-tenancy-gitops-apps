apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-is
spec:
  params:
    - name: build-id
      type: string
      description: Build ID
    - name: oc-image
      type: string
      default: quay.io/openshift/origin-cli:latest
      description: OC CLI Docker image needed to upload ACE BAR files
    - name: app-dir
      type: string
      description: ACE application project directory
    - name: utils-dir
      type: string
      description: ACE Utils project directory
    - name: app-name
      type: string
      description: BAR file name
    - name: artifactory-repo
      type: string
      default: generic-local
      description: Artifactory repository to store the BAR files
    - name: artifactory-basepath
      type: string
      default: tekton
      description: Artifactory repository basepath to store the BAR files
    - name: namespace
      type: string
      default: ace-tekton
      description: OpenShift namespace where the ACE Books application will be deployed to
    - name: artifactory-namespace
      type: string
      default: tools
      description: OpenShift namespace where Artifactory is deployed to
    - name: configuration-list
      type: string
      default: ""
      description: Configuration List for the ACE Server
    - name: ace-version
      type: string
      default: "12.0.7.0-r4"
      description: ACE Version
    - name: ace-license
      type: string
      default: "L-APEH-CJUCNR"
      description: ACE License
    - name: replicas
      type: string
      default: "1"
      description: ACE replicas
  workspaces:
    - name: workspace
  # stepTemplate:
  #   envFrom:
  #     - secretRef:
  #         name: artifactory-access
  steps:
    - image: $(params.oc-image)
      name: deploy-is
      workingDir: $(workspaces.workspace.path)
      script: |
        set -e
        cp -p $(params.utils-dir)/templates/integration-server.yaml.tmpl $(params.app-dir)
        cd $(params.app-dir)
        ARTIFACTORY_URL=`oc extract secret/artifactory-access -n $(params.artifactory-namespace) --keys="ARTIFACTORY_URL" --to=-`
        BAR_FILE="$(params.app-name)_$(params.build-id).bar"
        sed -i -e "s@https://{{ARTIFACTORY_HOST}}:{{ARTIFACTORY_PORT}}@{{ARTIFACTORY_URL}}@g" integration-server.yaml.tmpl
        SERVER_NAME=`echo "$(params.app-name)" | tr '[:upper:]' '[:lower:]'`
        cat integration-server.yaml.tmpl
        sed -e "s/{{NAME}}/$SERVER_NAME/g" \
            -e "s/{{NAMESPACE}}/$(params.namespace)/g" \
            -e "s@{{ARTIFACTORY_URL}}@$ARTIFACTORY_URL@g" \
            -e "s/{{ARTIFACTORY_REPO}}/$(params.artifactory-repo)/g" \
            -e "s/{{ARTIFACTORY_BASE_PATH}}/$(params.artifactory-basepath)/g" \
            -e "s/{{BAR_FILE}}/$BAR_FILE/g" \
            -e "s/{{CONFIGURATION_LIST}}/$(params.configuration-list)/g" \
            -e "s/{{ACE_VERSION}}/$(params.ace-version)/g" \
            -e "s/{{ACE_LICENSE}}/$(params.ace-license)/g" \
            -e "s/{{REPLICAS}}/$(params.replicas)/g" \
            integration-server.yaml.tmpl > integration-server.yaml
        cat integration-server.yaml
        oc apply -f integration-server.yaml
        echo "Wait for integration server to be Ready"
        oc wait --for=condition=Ready integrationserver/$SERVER_NAME --timeout=120s -n $(params.namespace)